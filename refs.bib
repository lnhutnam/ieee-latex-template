@article{Alsulami2019,
    abstract = {The performance of an operating system (OS) is affected by the algorithm policy that is used by a CPU to schedule the running processes. Thus, a better CPU scheduling algorithm results in faster OS performance using minimal resources over small amounts of time [11]. For that reason, many algorithms were proposed and implemented to enhance the performance of CPU scheduling. Round Robin is considered an efficient and fair algorithm because all processes are given the same amount of time quantum. However, its efficiency depends on the selected time quantum. In this paper, we present a comparative study of four different Round Robin algorithms namely: Adaptive Round Robin Algorithm, Best Time Quantum Round Robin CPU Scheduling, Optimal Round Robin Scheduling Using Manhattan Distance Algorithm, and Improved Round Robin Scheduling Algorithm. We compare these algorithms in terms of four performance factors including: Average Waiting Time (AWT), Average Turnaround Time (ATT), Average Response Time (ART) and Number of Contexts Switching (NCS). The simulation results show that both Adaptive Round Robin and Optimal Round Robin Scheduling Using Manhattan Distance algorithms are more efficient to be adopted as they recorded the minimum values of performance factors.},
    author = {Alsulami, Abdulaziz A. and Al-Haija, Qasem Abu and Thanoon, Mohammed I. and Mao, Qian},
    doi = {10.1109/SoutheastCon42311.2019.9020439},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/Performance Evaluation of Dynamic Round.pdf:pdf},
    isbn = {9781728101378},
    issn = {07347502},
    journal = {Conference Proceedings - IEEE SOUTHEASTCON},
    keywords = {Adaptive Scheduling,CPU Scheduling,Dynamic Time Quantum,Manhattan Distance,Round Robin (RR)},
    publisher = {IEEE},
    title = {{Performance Evaluation of Dynamic Round Robin Algorithms for CPU Scheduling}},
    volume = {2019-April},
    year = {2019}
}
@inproceedings{Ansu2017,
    abstract = {Cloud computing is an advancing technology which provides the servcies of Infrastructure, Platform and Software. Virtualization and Computer utility are the keys of Cloud computing. The numbers of cloud users are increasing day by day. So it is the need of the hour to make resources available on demand to satisfy user requirements. The technique in which resources namely storage, processing power, memory and network or I/O are abstracted is known as Virtualization. For executing the operating systems various virtualization techniques are available. They are: Full System Virtualization and Para Virtualization. In Full Virtualization, the whole architecture of hardware is duplicated virtually. No modifications are required in Guest OS as the OS deals with the VM hypervisor directly. In Para Virtualization, modifications of OS is required to run in parallel with other OS. For the Guest OS to access the hardware, the host OS must provide a Virtual Machine Interface. OS virtualization has many advantages such as migrating applications transparently, consolidation of server, online maintenance of OS and providing security. This paper briefs both the virtualization techniques and discusses the issues in OS level virtualization.},
    author = {Ansu, R and Samiksha and Anju, S and {John Singh}, K},
    booktitle = {IOP Conference Series: Materials Science and Engineering},
    doi = {10.1088/1757-899X/263/4/042002},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/Efficient{\_}operating{\_}system{\_}level{\_}virtualization{\_}te.pdf:pdf},
    issn = {1757899X},
    month = {nov},
    number = {4},
    pages = {042002},
    title = {{Efficient operating system level virtualization techniques for cloud resources}},
    url = {https://iopscience.iop.org/article/10.1088/1757-899X/263/4/042002},
    volume = {263},
    year = {2017}
}
@inproceedings{Forrest2011,
    abstract = {Virtual Machines were derived under one simple core idea, which was to gain the ability to run multiple Operating Systems that allow time-sharing of a single computer between several multitasking Operating Systems. Virtual Machines (VMs) provide the occurrence of what is known as server consolidation, where different services that used to be bind to an individual machine to avoid interference can now be run in separate VMs all located on the same physical machine. Using VMs in this manner helps a company save money and improve in resource utilization, but at what cost to the performance of the Operating System? We tested the boot time of a single guest OS machine, using an optimization tool developed by Microsoft called BootVis, under various levels of VM implementation and different Host Operating Systems and see the effect of VM on the boot time of an operating system. {\textcopyright} 2011 Authors.},
    address = {New York, New York, USA},
    author = {Forrest, Earl and Fuad, Mohammad M.},
    booktitle = {Proceedings of the Annual Southeast Conference},
    doi = {10.1145/2016039.2016121},
    isbn = {9781450306867},
    keywords = {booting,operating systems,virtual machine},
    pages = {308--309},
    publisher = {ACM Press},
    title = {{Virtualization and its effect on operating system}},
    year = {2011}
}
@inproceedings{Laadan2010,
    abstract = {Operating system (OS) virtualization can provide a number of important benefits, including transparent migration of applications, server consolidation, online OS maintenance, and enhanced system security. However, the construction of such a system presents a myriad of challenges, even for the most cautious developer, that if overlooked may result in a weak, incomplete virtualization. We present a detailed discussion of key implementation issues in providing OS virtualization in a commodity OS, including system call interposition, virtualization state management, and race conditions. We discuss our experiences in implementing such functionality across two major versions of Linux entirely in a loadable kernel module without any kernel modification. We present experimental results on both uniprocessor and multiprocessor systems that demonstrate the ability of our approach to provide fine-grain virtualization with very low overhead. Copyright 2010 ACM.},
    author = {Laadan, Oren and Nieh, Jason},
    booktitle = {ACM International Conference Proceeding Series},
    doi = {10.1145/1815695.1815717},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/Operating system virtualization$\backslash$: Practice and experience.pdf:pdf},
    isbn = {9781605589084},
    keywords = {Operating systems,Virtualization},
    title = {{Operating system virtualization: Practice and experience}},
    year = {2010}
}
@article{Lee2011,
    abstract = {Multithreading is an efficient technique commonly used to maximize the performance of CPU. One of the most important challenges in multithreading is thread pool management. It needs to retain a proper number of threads in the pool, which minimizes the response time and maximizes the resource utilization. To achieve this goal, this paper proposes a novel trendy exponential moving average (TEMA) scheme for predicting the number of threads. Also, a prediction-based thread pool management scheme is proposed which adjusts the idle timeout period and thread pool size to effectively adapt the system to the changing environment. The experiment results show the effectiveness of the proposed approach in terms of response time and CPU usage, compared with the existing prediction-based scheme and Sun watermark. {\textcopyright} 2011 IEEE.},
    author = {Lee, Kang Lyul and Pham, Hong Nhat and Kim, Hee Seong and Youn, Hee Yong and Song, Ohyoung},
    doi = {10.1109/ISPA.2011.61},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/A Novel Predictive and Self Adaptive Dynamic Thread Pool Management.pdf:pdf},
    isbn = {9780769544281},
    journal = {Proceedings - 9th IEEE International Symposium on Parallel and Distributed Processing with Applications, ISPA 2011},
    keywords = {Dynamic thread management,Multithreading,Prediction,Queuing model,Resource management,Thread pool},
    pages = {93--98},
    publisher = {IEEE},
    title = {{A novel predictive and self-adaptive dynamic thread pool management}},
    year = {2011}
}
@inproceedings{Li2010,
    abstract = {With the development of the computer technology, the virtual machine has been become the main research topic. Understanding of the current technology and future trends of virtual machine system greatly help to improve the service performance of system. Therefore, we describe the current technology and present the future trends of virtual machine system in the paper. In the current technology of virtual machine system, we mainly describe the virtualization technology, the resource scheduling technology, the migration technology, the security technology and the performance evaluation technology. In the future trends of virtual machine system, we mainly present an overview of the future CPU architecture, the management mode of future memory and resource, the future maintaining method of system security and the performance evaluation method of future multiple virtual machine system. {\textcopyright} 2010 IEEE.},
    author = {Li, Yunfa and Li, Wanqing and Jiang, Congfeng},
    booktitle = {3rd International Symposium on Electronic Commerce and Security, ISECS 2010},
    doi = {10.1109/ISECS.2010.80},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/A survey of virtual machine system$\backslash$: Current technology and future trends.pdf:pdf},
    isbn = {978-1-4244-8231-3},
    keywords = {Migration,Performance evaluation,Resource scheduling,Security,Virtual machine system},
    month = {jul},
    pages = {332--336},
    publisher = {IEEE},
    title = {{A survey of virtual machine system: Current technology and future trends}},
    year = {2010}
}
@article{Negi2005,
    abstract = {In this work we use Machine Learning (ML) techniques to learn the CPU time-slice utilization behavior of known programs in a Linux system. Learning is done by an analysis of certain static and dynamic attributes of the processes while they are being run. Our objective was to discover the most important static and dynamic attributes of the processes that can help best in prediction of CPU burst times which minimize the process TaT (Turn-around-Time). In our experimentation we modify the Linux Kernel scheduler (version 2.4.20-8) to allow scheduling with customized time slices. The "Waikato Environment for Knowledge Analysis" (Weka), an open source machine-learning tool is used to find the most suitable ML method to characterize our programs. We experimentally und that the C4.5 Decision Tree algorithm most effectively solved the problem. We find that predictive scheduling could reduce TaT in the range of 1.4{\%} to 5.8{\%}. This was due to a reduction in the number of context switches needed to complete the process execution. We find our result interesting in the context that generally operating systems presently never make use of a program's previous execution history in their scheduling behavior.},
    author = {Negi, Atul and {Kishore Kumar}, P.},
    doi = {10.1109/TENCON.2005.300837},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/Applying Machine Learning Techniques to Improve.pdf:pdf},
    isbn = {0780393112},
    issn = {21593450},
    journal = {IEEE Region 10 Annual International Conference, Proceedings/TENCON},
    publisher = {IEEE},
    title = {{Applying machine learning techniques to improve linux process scheduling}},
    volume = {2007},
    year = {2005}
}
@article{Of2012,
    author = {Of, Mpact and On, Hange},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/THE IMPACT OF DYNAMICALLY.pdf:pdf},
    isbn = {1893790037},
    keywords = {Climatic Changes,Technology Transfer},
    number = {June},
    pages = {259--278},
    title = {{T He I Mpact of C Limate C Hange}},
    url = {http://scholarlycommons.law.case.edu/cgi/viewcontent.cgi?article=1072{\&}context=jolti},
    volume = {5},
    year = {2012}
}
@article{Pandey2017,
    author = {Pandey, Dev Ras and Mishra, Bharat and Tripathi, S. K.},
    doi = {10.5281/ZENODO.1128969},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/Operating-System-Based-Virtualization-Models-in-Cloud-Computing.pdf:pdf},
    journal = {International Journal of Computer, Electrical, Automation, Control and Information Engineering},
    keywords = {OS based virtualization,Virtualization,container and hypervisor based virtualization.},
    month = {jan},
    number = {3},
    pages = {284--287},
    title = {{Operating System Based Virtualization Models in Cloud Computing}},
    url = {https://zenodo.org/record/1128969 https://pdfs.semanticscholar.org/46c9/d9d971f1a0e8f658e3fd6293c1061e5209b3.pdf},
    volume = {11},
    year = {2017}
}
@article{Suranauwarat2017,
    abstract = {This paper presents a simulator that is written in C{\#} and designed as a means of enhancing students' learning of disk scheduling algorithms both in and out of the classroom. The simulator animates the concepts of several disk scheduling algorithms commonly discussed in operating systems textbooks. The simulator has three unique features. First, it uses a more practical model of disk requests that allows new requests to come in while other requests are being processed. Second, it has a practice function that allows the user to reinforce the concepts learnt by solving scheduling problems and check the answers against the simulator. Third, it has a comparison function that lets the user easily compare the simulation results and the performance statistics of different disk scheduling algorithms, up to 9 algorithms, at the same time.},
    author = {Suranauwarat, Sukanya},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/A CPU Scheduling Algorithm Simulator.pdf:pdf},
    isbn = {1424410843},
    issn = {10693769},
    journal = {Computers in Education Journal},
    keywords = {Algorithm Animation,Computer Science Education,Disk Scheduling Algorithms,Educational Software,Operating Systems},
    number = {3},
    pages = {19--24},
    title = {{A disk scheduling algorithm simulator}},
    volume = {8},
    year = {2017}
}
@article{Yoshida2015,
    abstract = {Electric Vehicles (EVs) are deemed as an appealing and practical solution for environmental and energy problems. The mileage per charge of EVs, however, is shorter than the mileage of Internal Combustion Engine Vehicles (ICEVs). In this paper, Range Extension Autonomous Driving (READ) system considering road gradient information is proposed. The proposed system optimizes the velocity trajectory and the driving-braking force distribution ratio for autonomous driving. The authors carried out simulations and bench tests that prove the effectiveness of the proposal in terms of mileage per charge.},
    author = {Yoshida, Hideki and Fujimoto, Hiroshi and Kawano, Daisuke and Goto, Yuichi and Tsuchimoto, Misaki and Sato, Koji},
    doi = {10.1109/IECON.2015.7392843},
    file = {:home/anjalo/Documents/SLIIT MSc/Research Papers/Year 1 - Sem 1/ROS an open-source Robot Operating System.pdf:pdf},
    isbn = {9781479917624},
    journal = {IECON 2015 - 41st Annual Conference of the IEEE Industrial Electronics Society},
    number = {Figure 1},
    pages = {4754--4759},
    title = {{Range extension autonomous driving for electric vehicles based on optimal velocity trajectory and driving braking force distribution considering road gradient information}},
    year = {2015}
}